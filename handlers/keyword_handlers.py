import asyncio
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from states.forms import AddForm
from database import get_user_keywords, add_keyword_for_user, delete_keyword
from keyboards.inline import keywords_main_keyboard, MenuCallback
from keyboards.reply import main_menu, cancel_menu

keywords_router = Router()

async def show_keyword_list(message_or_callback: Message | CallbackQuery):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º —É—Å—ñ—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤."""
    user_id = message_or_callback.from_user.id
    keywords = await get_user_keywords(user_id)
    text = (
        "üìù **–í–∞—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:**\n\n"
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ —Å–ª–æ–≤–æ, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ."
    ) if keywords else "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤."
    keyboard = keywords_main_keyboard(keywords)
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    else: # –Ø–∫—â–æ —Ü–µ CallbackQuery
        try:
            await message_or_callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        except Exception:
            await message_or_callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


@keywords_router.message(F.text == "üìù –ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def keywords_menu_command(message: Message):
    await show_keyword_list(message)


@keywords_router.callback_query(MenuCallback.filter(F.level == 'main_keywords'))
async def navigate_keywords_menu(callback: CallbackQuery, callback_data: MenuCallback, state: FSMContext, update_queue: asyncio.Queue):
    action = callback_data.action
    
    if action == 'add':
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ —Å–ª–æ–≤–æ (–≤–æ–Ω–æ –±—É–¥–µ –¥–æ–¥–∞–Ω–æ —è–∫ –ª–æ–∫–∞–ª—å–Ω–µ, –π–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–¥–µ –ø—Ä–∏–≤'—è–∑–∞—Ç–∏ –¥–æ –∫–∞–Ω–∞–ª—ñ–≤):", reply_markup=cancel_menu)
        await state.set_state(AddForm.keyword_name)
        await callback.answer()
    
    elif action == 'delete':
        await delete_keyword(callback_data.item_id)
        await callback.answer("–°–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        await show_keyword_list(callback)
        update_queue.put_nowait({'action': 'update_subscriptions'})


@keywords_router.message(AddForm.keyword_name)
async def process_new_keyword(message: Message, state: FSMContext, update_queue: asyncio.Queue):
    await state.clear()
    keyword_name = message.text
    user_id = message.from_user.id
    
    keyword_id = await add_keyword_for_user(user_id, keyword_name, is_global=False)
    
    if keyword_id:
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '<b>{keyword_name}</b>' –¥–æ–¥–∞–Ω–æ –¥–æ –≤–∞—à–æ–≥–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.", parse_mode="HTML", reply_markup=main_menu)
        update_queue.put_nowait({'action': 'update_subscriptions'})
    else:
        await message.answer(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{keyword_name}</b>' –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É.", parse_mode="HTML", reply_markup=main_menu)
        
    await show_keyword_list(message)
# handlers/keyword_management.py

import asyncio
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from states.keyword import AddKeyword
from database import add_keyword_for_user, get_user_keywords, delete_keyword_by_id
from keyboards.inline import get_list_keyboard, DeleteCallback

router = Router()


# –¶–µ–π –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–ø–µ—Ä –ø–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
@router.message(F.text == "üìù –ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def show_keywords(message: Message):
    user_id = message.from_user.id
    keywords = await get_user_keywords(user_id)
    
    if not keywords:
        text = "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤. –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä—à–µ?"
        keyboard = get_list_keyboard([], 'del_keyword')
    else:
        text = "–í–∞—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:"
        keyboard = get_list_keyboard(keywords, 'del_keyword')
    
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ"
@router.callback_query(F.data == "add_keyword")
async def start_add_keyword_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–±–æ —Ñ—Ä–∞–∑—É, —è–∫—É –±—É–¥–µ–º–æ —à—É–∫–∞—Ç–∏.")
    await state.set_state(AddKeyword.waiting_for_keyword)
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—Å–∏–ª–∞—î —Å–ª–æ–≤–æ, –ø–µ—Ä–µ–±—É–≤–∞—é—á–∏ —É —Å—Ç–∞–Ω—ñ AddKeyword.waiting_for_keyword
@router.message(AddKeyword.waiting_for_keyword)
async def process_keyword(message: Message, state: FSMContext, update_queue: asyncio.Queue):
    await state.clear()

    keyword = message.text
    user_id = message.from_user.id
    
    is_added = await add_keyword_for_user(user_id, keyword)
    
    if is_added:
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '<b>{keyword}</b>' –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.", parse_mode="HTML")
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Å–∏–≥–Ω–∞–ª –Ω–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update_queue.put_nowait({'action': 'update_subscriptions'})
    else:
        await message.answer(f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{keyword}</b>' –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É.", parse_mode="HTML")
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤
    await show_keywords(message)


# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
@router.callback_query(DeleteCallback.filter(F.action == "del_keyword"))
async def delete_keyword(callback: CallbackQuery, callback_data: DeleteCallback, update_queue: asyncio.Queue):
    keyword_id_to_delete = callback_data.item_id
    await delete_keyword_by_id(keyword_id_to_delete)
    
    user_id = callback.from_user.id
    keywords = await get_user_keywords(user_id)
    
    text = "–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –í–∞—à –æ–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫:"
    if not keywords:
        text = "–£—Å—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ?"
        
    keyboard = get_list_keyboard(keywords, 'del_keyword')
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    
    update_queue.put_nowait({'action': 'update_subscriptions'})
    await callback.answer(text="–°–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=False)
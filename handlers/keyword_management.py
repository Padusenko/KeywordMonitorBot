# handlers/keyword_management.py

import asyncio
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from states.keyword import AddKeyword
from database import add_keyword_for_user, get_user_keywords, delete_keyword_by_id
from keyboards.inline import get_list_keyboard, DeleteCallback
from keyboards.reply import main_menu, cancel_menu

router = Router()


# –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É —Å–ø–∏—Å–∫—É —Å–ª—ñ–≤
async def show_keyword_list(message: types.User | Message | CallbackQuery, user_id: int):
    keywords = await get_user_keywords(user_id)
    text = "–í–∞—à—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:" if keywords else "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤."
    keyboard = get_list_keyboard(keywords, 'del_keyword')

    if isinstance(message, Message):
        await message.answer(text, reply_markup=keyboard)
    else: # –Ø–∫—â–æ —Ü–µ CallbackQuery
        await message.message.edit_text(text, reply_markup=keyboard)


# –°–ø—Ä–∞—Ü—å–æ–≤—É—î –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞"
@router.message(F.text == "üìù –ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞")
async def show_keywords_command(message: Message):
    await show_keyword_list(message, message.from_user.id)


# –°–ø—Ä–∞—Ü—å–æ–≤—É—î –Ω–∞ inline-–∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–µ —Å–ª–æ–≤–æ"
@router.callback_query(F.data == "add_keyword")
async def start_add_keyword_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–±–æ —Ñ—Ä–∞–∑—É, —è–∫—É –±—É–¥–µ–º–æ —à—É–∫–∞—Ç–∏.",
        reply_markup=cancel_menu
    )
    await state.set_state(AddKeyword.waiting_for_keyword)
    await callback.answer()


# –û–±—Ä–æ–±–ª—è—î —Å–ª–æ–≤–æ, –Ω–∞–¥—ñ—Å–ª–∞–Ω–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@router.message(AddKeyword.waiting_for_keyword)
async def process_keyword(message: Message, state: FSMContext, update_queue: asyncio.Queue):
    await state.clear()

    keyword = message.text
    user_id = message.from_user.id
    is_added = await add_keyword_for_user(user_id, keyword)
    
    response_text = ""
    if is_added:
        response_text = f"‚úÖ –°–ª–æ–≤–æ '<b>{keyword}</b>' –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è."
        update_queue.put_nowait({'action': 'update_subscriptions'})
    else:
        response_text = f"‚ö†Ô∏è –°–ª–æ–≤–æ '<b>{keyword}</b>' –≤–∂–µ —î —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É."
        
    await message.answer(response_text, parse_mode="HTML", reply_markup=main_menu)
    await show_keyword_list(message, user_id)


# –û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í–∏–¥–∞–ª–∏—Ç–∏"
@router.callback_query(DeleteCallback.filter(F.action == "del_keyword"))
async def delete_keyword(callback: CallbackQuery, callback_data: DeleteCallback, update_queue: asyncio.Queue):
    await delete_keyword_by_id(callback_data.item_id)
    
    await callback.answer(text="–°–ª–æ–≤–æ –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=False)
    
    await show_keyword_list(callback, callback.from_user.id)

    update_queue.put_nowait({'action': 'update_subscriptions'})
import re
import asyncio
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from keyboards.inline import (
    channels_main_keyboard, channel_config_keyboard, link_keywords_keyboard, 
    MenuCallback, UnlinkCallback, ToggleLinkCallback
)
from states.forms import AddForm
from database import *
from keyboards.inline import *
from keyboards.reply import main_menu, cancel_menu
from aiogram.filters import StateFilter

channels_router = Router()

# –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ù–û–í–õ–ï–ù–ù–Ø –ú–ï–ù–Æ

async def show_channel_list(message_or_callback: Message | CallbackQuery):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–∞–ª—ñ–≤."""
    user_id = message_or_callback.from_user.id
    channels = await get_user_channels(user_id)
    text = "üóÇÔ∏è **–í–∞—à—ñ –∫–∞–Ω–∞–ª–∏ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É:**" if channels else "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤."
    keyboard = channels_main_keyboard(channels)
    
    if isinstance(message_or_callback, Message):
        await message_or_callback.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    else:
        try:
            await message_or_callback.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        except Exception:
            await message_or_callback.message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


async def show_channel_menu(callback_or_message: CallbackQuery | Message, channel_id: int, bot: Bot):
    """–ù–∞–¥—Å–∏–ª–∞—î –∞–±–æ –æ–Ω–æ–≤–ª—é—î –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º –∫–∞–Ω–∞–ª–æ–º."""
    user_id = callback_or_message.from_user.id
    # –û—Ç—Ä–∏–º—É—î–º–æ —è–∫ –ø—Ä–∏–≤'—è–∑–∞–Ω—ñ, —Ç–∞–∫ —ñ –≤—Å—ñ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    linked_keywords = await get_keywords_for_channel(channel_id)
    all_user_keywords = await get_user_keywords(user_id)
    global_keywords = [kw for kw in all_user_keywords if kw['is_global']]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —î–¥–∏–Ω–∏–π —Å–ø–∏—Å–æ–∫, —É–Ω–∏–∫–∞—é—á–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    visible_keywords_dict = {kw['id']: kw for kw in linked_keywords}
    for kw in global_keywords:
        if kw['id'] not in visible_keywords_dict:
            visible_keywords_dict[kw['id']] = kw
    
    all_visible_keywords = list(visible_keywords_dict.values())

    channels = await get_user_channels(user_id)
    channel_url = next((ch['channel_url'] for ch in channels if ch['id'] == channel_id), "–ù–µ–≤—ñ–¥–æ–º–∏–π –∫–∞–Ω–∞–ª")

    text = f"‚öôÔ∏è **–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∫–∞–Ω–∞–ª–æ–º:**\n`{channel_url}`\n\nüìÑ-–ª–æ–∫–∞–ª—å–Ω–µ, üåê-–≥–ª–æ–±–∞–ª—å–Ω–µ"
    keyboard = channel_config_keyboard(channel_id, all_visible_keywords)
    
    if isinstance(callback_or_message, CallbackQuery):
        await callback_or_message.message.edit_text(text, parse_mode="Markdown", reply_markup=keyboard)
        await callback_or_message.answer()
    else:
        await bot.send_message(callback_or_message.chat.id, text, parse_mode="Markdown", reply_markup=keyboard)


# –û–ë–†–û–ë–ù–ò–ö–ò –ù–ê–í–Ü–ì–ê–¶–Ü–á

@channels_router.message(F.text == "üóÇÔ∏è –ú–æ—ó –∫–∞–Ω–∞–ª–∏", StateFilter(None))
async def channels_menu_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        await state.clear()
        await message.answer("–ü–æ–ø–µ—Ä–µ–¥–Ω—è –¥—ñ—è –±—É–ª–∞ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.", reply_markup=main_menu)
    
    await show_channel_list(message)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é –∫–∞–Ω–∞–ª—ñ–≤
@channels_router.callback_query(MenuCallback.filter(F.level == 'main_channels'))
async def navigate_channels_menu(callback: CallbackQuery, callback_data: MenuCallback, state: FSMContext, update_queue: asyncio.Queue):
    action = callback_data.action
    
    if action == 'add_channel':
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –Ω–æ–≤–∏–π –∫–∞–Ω–∞–ª:", reply_markup=cancel_menu)
        await state.set_state(AddForm.channel_url)
    elif action == 'add_global_kw':
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ **–≥–ª–æ–±–∞–ª—å–Ω–µ** –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ (–±—É–¥–µ —à—É–∫–∞—Ç–∏—Å—è —É –≤—Å—ñ—Ö –∫–∞–Ω–∞–ª–∞—Ö):", reply_markup=cancel_menu)
        await state.set_state(AddForm.global_keyword_name)
    elif action == 'view':
        await show_channel_list(callback)
    elif action == 'delete':
        await delete_channel(callback_data.item_id)
        await callback.answer("–ö–∞–Ω–∞–ª –≤–∏–¥–∞–ª–µ–Ω–æ!", show_alert=True)
        await show_channel_list(callback)
        update_queue.put_nowait({'action': 'update_subscriptions'})
    await callback.answer()

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–æ–∫ —É –º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
@channels_router.callback_query(MenuCallback.filter(F.level == 'channel_config'))
async def navigate_channel_submenu(callback: CallbackQuery, callback_data: MenuCallback, state: FSMContext, bot: Bot):
    action = callback_data.action
    channel_id = callback_data.item_id
    
    if action == 'view':
        await show_channel_menu(callback, channel_id, bot)
    elif action == 'add_kw':
        await state.update_data(current_channel_id=channel_id)
        await callback.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–µ **–ª–æ–∫–∞–ª—å–Ω–µ** —Å–ª–æ–≤–æ –¥–ª—è —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É:", reply_markup=cancel_menu)
        await state.set_state(AddForm.new_keyword_for_channel)
        await callback.answer()
    elif action == 'link':
        all_keywords = await get_user_keywords(callback.from_user.id)
        if not all_keywords:
            await callback.answer("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å–ª—ñ–≤ —É –∑–∞–≥–∞–ª—å–Ω–æ–º—É —Å–ø–∏—Å–∫—É. –°–ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–π—Ç–µ —ó—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞'.", show_alert=True)
            return
        linked_keywords = await get_keywords_for_channel(channel_id)
        linked_ids = [kw['id'] for kw in linked_keywords]
        text = "–û–±–µ—Ä—ñ—Ç—å —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –¥–æ —Ü—å–æ–≥–æ –∫–∞–Ω–∞–ª—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –¥–æ–¥–∞—Ç–∏/–≤–∏–¥–∞–ª–∏—Ç–∏):"
        keyboard = link_keywords_keyboard(channel_id, all_keywords, linked_ids)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()


# –û–ë–†–û–ë–ù–ò–ö–ò –°–¢–ê–ù–Ü–í (FSM)

MENU_BUTTONS = ["üóÇÔ∏è –ú–æ—ó –∫–∞–Ω–∞–ª–∏", "üìù –ú–æ—ó –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞", "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞"]

@channels_router.message(AddForm.channel_url)
async def process_new_channel(message: Message, state: FSMContext, update_queue: asyncio.Queue):
    match = re.match(r'(?:https?:\/\/)?(?:t(?:elegram)?\.me\/|@)([a-zA-Z0-9_]{5,32})', message.text.strip())
    if not match:
        await message.answer("‚ùå **–ü–æ–º–∏–ª–∫–∞.** –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Å–∏–ª–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ —Å–∫–∞—Å—É–π—Ç–µ –¥—ñ—é.")
        return 

    await state.clear()
    
    formatted_url = f"https://t.me/{match.group(1)}"
    channel_id = await add_channel_for_user(message.from_user.id, formatted_url)
    
    if channel_id:
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª <b>{formatted_url}</b> –¥–æ–¥–∞–Ω–æ.", parse_mode="HTML", reply_markup=main_menu)
        update_queue.put_nowait({'action': 'add_channel', 'url': formatted_url})
    else:
        await message.answer(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª <b>{formatted_url}</b> –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É.", parse_mode="HTML", reply_markup=main_menu)
        
    await show_channel_list(message)

@channels_router.message(AddForm.global_keyword_name)
async def process_new_global_keyword(message: Message, state: FSMContext, update_queue: asyncio.Queue):
    await state.clear()
    await add_keyword_for_user(message.from_user.id, message.text, is_global=True)
    await message.answer(f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–µ —Å–ª–æ–≤–æ '<b>{message.text}</b>' —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ.", parse_mode="HTML", reply_markup=main_menu)
    update_queue.put_nowait({'action': 'update_subscriptions'})
    await show_channel_list(message)

@channels_router.message(AddForm.new_keyword_for_channel)
async def process_new_local_keyword(message: Message, state: FSMContext, update_queue: asyncio.Queue, bot: Bot): # <--- –î–æ–¥–∞–ª–∏ bot
    data = await state.get_data()
    channel_id = data.get('current_channel_id')
    await state.clear()
    
    keyword_name = message.text
    user_id = message.from_user.id
    
    keyword_id = await add_keyword_for_user(user_id, keyword_name, is_global=False)
    if not keyword_id:
        keyword_id = await find_keyword_in_user_list(user_id, keyword_name)
    
    if keyword_id:
        await link_keyword_to_channel(channel_id, keyword_id)
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '<b>{keyword_name}</b>' –¥–æ–¥–∞–Ω–æ —Ç–∞ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ –¥–æ –∫–∞–Ω–∞–ª—É.", parse_mode="HTML", reply_markup=main_menu)
        update_queue.put_nowait({'action': 'update_subscriptions'})
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –º–µ–Ω—é –∫–∞–Ω–∞–ª—É
    await show_channel_menu(message, channel_id, bot)


# –û–ë–†–û–ë–ù–ò–ö–ò –î–†–Ü–ë–ù–ò–• –ö–û–õ–ë–ï–ö–Ü–í

@channels_router.callback_query(ToggleLinkCallback.filter())
async def toggle_keyword_link(callback: CallbackQuery, callback_data: ToggleLinkCallback, update_queue: asyncio.Queue):
    channel_id = callback_data.channel_id
    keyword_id = callback_data.keyword_id
    
    linked_keywords = await get_keywords_for_channel(channel_id)
    is_linked = any(kw['id'] == keyword_id for kw in linked_keywords)
    
    if is_linked:
        await unlink_keyword_from_channel_by_ids(channel_id, keyword_id)
        await callback.answer("–ü—Ä–∏–≤'—è–∑–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ")
    else:
        await link_keyword_to_channel(channel_id, keyword_id)
        await callback.answer("–°–ª–æ–≤–æ –ø—Ä–∏–≤'—è–∑–∞–Ω–æ")
        
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏ –∑–º—ñ–Ω–∏
    all_keywords = await get_user_keywords(callback.from_user.id)
    linked_keywords_new = await get_keywords_for_channel(channel_id)
    linked_ids = [kw['id'] for kw in linked_keywords_new]
    keyboard = link_keywords_keyboard(channel_id, all_keywords, linked_ids)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except Exception:
        pass
    
    update_queue.put_nowait({'action': 'update_subscriptions'})


@channels_router.callback_query(UnlinkCallback.filter())
async def unlink_keyword(callback: CallbackQuery, callback_data: UnlinkCallback, update_queue: asyncio.Queue, bot: Bot):
    channel_id = callback_data.channel_id
    keyword_id = callback_data.keyword_id

    await unlink_keyword_from_channel_by_ids(channel_id, keyword_id)

    await callback.answer("–ü—Ä–∏–≤'—è–∑–∫—É —Å–ª–æ–≤–∞ –≤–∏–¥–∞–ª–µ–Ω–æ", show_alert=False)
    
    await show_channel_menu(callback, channel_id, bot)
    
    update_queue.put_nowait({'action': 'update_subscriptions'})
import asyncio
import logging
import os
from telethon.sync import TelegramClient
from telethon import events
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.tl.types import Channel
from config import API_ID, API_HASH
from database import get_all_unique_channels, get_subscriptions_for_channel
from config import API_ID, API_HASH, TELETHON_SESSION
from telethon.sessions import StringSession

logging.getLogger('telethon').setLevel(logging.WARNING)

session = None
if TELETHON_SESSION:
    # –Ø–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –æ—Ç–æ—á–µ–Ω–Ω—è —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–±'—î–∫—Ç StringSession
    session = StringSession(TELETHON_SESSION)
else:
    # –Ø–∫—â–æ –º–∏ –ø—Ä–∞—Ü—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–∑–≤—É —Ñ–∞–π–ª—É
    session = 'keyword_monitor_session'

client = TelegramClient(session, API_ID, API_HASH)

# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–µ—à –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–æ–∫: { 'url1': [(user_id, keyword), ...], 'url2': ... }
channel_subscriptions = {}

async def update_subscriptions_cache():
    """–ü–æ–≤–Ω—ñ—Å—Ç—é –æ–Ω–æ–≤–ª—é—î –∫–µ—à –ø—ñ–¥–ø–∏—Å–æ–∫ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö."""
    global channel_subscriptions
    urls = await get_all_unique_channels()
    new_subscriptions = {}
    for url in urls:
        new_subscriptions[url] = await get_subscriptions_for_channel(url)
    channel_subscriptions = new_subscriptions
    print("Subscriptions cache has been updated.")


async def update_worker(update_queue: asyncio.Queue):
    """–í–æ—Ä–∫–µ—Ä, —â–æ —Å–ª—É—Ö–∞—î —á–µ—Ä–≥—É –æ–Ω–æ–≤–ª–µ–Ω—å —ñ –¥–∏–Ω–∞–º—ñ—á–Ω–æ —Ä–µ–∞–≥—É—î –Ω–∞ –Ω–∏—Ö."""
    while True:
        try:
            update = await update_queue.get()
            action = update.get('action')
            
            if action == 'add_channel':
                url = update.get('url')
                print(f"Update worker: Received new channel to join -> {url}")
                try:
                    await client(JoinChannelRequest(url.split('/')[-1]))
                    print(f"Successfully joined new channel: {url}")
                except Exception as e:
                    # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –≤–∂–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º –∞–±–æ –∫–∞–Ω–∞–ª –Ω–µ —ñ—Å–Ω—É—î
                    if "user_already_participant" not in str(e).lower():
                        print(f"Could not join channel {url}: {e}")
                # –£ –±—É–¥—å-—è–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É –æ–Ω–æ–≤–ª—é—î–º–æ –∫–µ—à
                await update_subscriptions_cache()

            elif action == 'update_subscriptions':
                print("Update worker: Received full subscription update signal.")
                await update_subscriptions_cache()
                
            update_queue.task_done()
        except Exception as e:
            logging.error(f"Error in update_worker: {e}")


@client.on(events.NewMessage)
async def handle_new_message(event: events.NewMessage.Event):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ —à—É–∫–∞—î –∑–±—ñ–≥–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."""
    if not isinstance(event.chat, Channel) or not hasattr(event.chat, 'username') or not event.chat.username:
        return
    
    channel_url = f"https://t.me/{event.chat.username}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ü–µ–π –∫–∞–Ω–∞–ª, —ñ —á–∏ —î —Ç–µ–∫—Å—Ç —É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    if channel_url not in channel_subscriptions or not event.message.text:
        return

    message_text_lower = event.message.text.lower()
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ .get() –¥–ª—è –±–µ–∑–ø–µ—á–Ω–æ–≥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–ø–∏—Å–æ–∫
    for user_id, keyword in channel_subscriptions.get(channel_url, []):
        if keyword in message_text_lower:
            print(f"Found keyword '{keyword}' for user {user_id} in channel {channel_url}")
            
            message_link = f"https://t.me/{event.chat.username}/{event.message.id}"
            
            notification_text = (
                f"üî• <b>–ó–Ω–∞–π–¥–µ–Ω–æ –∑–±—ñ–≥!</b>\n\n"
                f"<b>–ö–∞–Ω–∞–ª:</b> {event.chat.title}\n"
                f"<b>–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ:</b> {keyword}"
            )
            
            # –ö–ª–∞–¥–µ–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤ —á–µ—Ä–≥—É
            asyncio.get_event_loop().notification_queue.put_nowait({
                'user_id': user_id,
                'text': notification_text,
                'link': message_link
            })


async def start_client(notif_queue: asyncio.Queue, upd_queue: asyncio.Queue):
    """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î Telethon –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –π–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∏."""
    print("Starting Telethon client...")
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–≥–∏ –≤ —Ü–∏–∫–ª—ñ –ø–æ–¥—ñ–π –¥–ª—è –¥–æ—Å—Ç—É–ø—É –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è
    loop = asyncio.get_event_loop()
    loop.notification_queue = notif_queue
    loop.update_queue = upd_queue # –•–æ—á–∞ –º–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ —ó—ó –Ω–∞–ø—Ä—è–º—É —É –≤–æ—Ä–∫–µ—Ä
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤–æ—Ä–∫–µ—Ä –æ–Ω–æ–≤–ª–µ–Ω—å —É —Ñ–æ–Ω—ñ
    asyncio.create_task(update_worker(upd_queue))
    
    await client.start()
    print("Telethon client authorized.")

    # –ü–µ—Ä–≤–∏–Ω–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∫–µ—à—É —Ç–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª–∏
    await update_subscriptions_cache()
    for url in channel_subscriptions.keys():
        try:
            await client(JoinChannelRequest(url.split('/')[-1]))
        except Exception:
            pass
            
    print("Telethon client is running and listening for messages...")
    #  await client.run_until_disconnected()